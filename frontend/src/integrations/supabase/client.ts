// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl) {
  console.error('Missing env var: VITE_SUPABASE_URL');
}

if (!supabaseAnonKey) {
  console.error('Missing env var: VITE_SUPABASE_ANON_KEY');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  supabaseUrl!,
  supabaseAnonKey!,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      headers: {
        'x-application-name': 'scholarsphere',
      },
    },
  }
);

// Type-safe database functions with error handling
export const db = {
  faculty: {
    getAll: async () => {
      return await supabase
        .from('faculty')
        .select('*')
        .order('citations', { ascending: false });
    },
    getById: async (id: string) => {
      try {
        const { data, error } = await supabase
          .from('faculty')
          .select(`
            *,
            faculty_publications (
              *,
              publications (*)
            )
          `)
          .eq('id', id)
          .single()
        
        if (error) {
          console.error('Error fetching faculty by id:', error);
          throw error;
        }
        
        return { data, error: null };
      } catch (err) {
        console.error('Error in getById faculty:', err);
        return { data: null, error: err instanceof Error ? err : new Error('Unknown error') };
      }
    },
    search: async (query: string) => {
      return await supabase
        .from('faculty')
        .select('*')
        .textSearch('name', query)
        .order('citations', { ascending: false });
    },
    getPublications: async (facultyName: string) => {
      // First get the faculty ID
      const { data: faculty, error: facultyError } = await supabase
        .from('faculty')
        .select('id')
        .ilike('name', `%${facultyName}%`)
        .single();

      if (facultyError || !faculty) {
        return { data: null, error: facultyError || new Error('Faculty not found') };
      }

      // Then get their publications
      return await supabase
        .from('publications')
        .select(`
          *,
          faculty!publications_faculty_id_fkey (
            name,
            department,
            institution
          )
        `)
        .eq('faculty_id', faculty.id)
        .order('year', { ascending: false });
    }
  },
  publications: {
    getAll: async () => {
      return await supabase
        .from('publications')
        .select('*')
        .order('citation_count', { ascending: false });
    },
    getByFacultyId: async (facultyId: string) => {
      try {
        const { data, error } = await supabase
          .from('faculty_publications')
          .select(`
            *,
            publications (*)
          `)
          .eq('faculty_id', facultyId)
          .order('author_position')
        
        if (error) {
          console.error('Error fetching faculty publications:', error);
          throw error;
        }
        
        return { data, error: null };
      } catch (err) {
        console.error('Error in getByFacultyId publications:', err);
        return { data: null, error: err instanceof Error ? err : new Error('Unknown error') };
      }
    }
  },
  researchTrends: {
    getAll: async () => {
      return await supabase
        .from('research_trends')
        .select('*')
        .order('trending_score', { ascending: false });
    }
  },
  profiles: {
    getById: async (id: string) => {
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', id)
        .single()
      return { data, error }
    },
    update: async (id: string, updates: Partial<Database['public']['Tables']['profiles']['Update']>) => {
      const { data, error } = await supabase
        .from('profiles')
        .update(updates)
        .eq('id', id)
      return { data, error }
    }
  }
}